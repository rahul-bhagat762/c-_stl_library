/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <bits/stdc++.h>
#include<math.h>
#include<string.h>
using namespace std;
void explainPairs(){
    pair<int ,int>p = {1,3};
    cout<<p.first <<" "<<p.second<<endl;;
    pair<int,pair<int ,int>> p1 = {1,{3,4}};
    cout<<p1.first <<" "<<p1.second.second <<" "<<p1.second.first<<endl;
    pair<int,int> arr[] = {{1,2},{2,5},{5,1}};
    cout<< arr[1].second<<endl;
}

void explainVector() {
    // vector<int> v;
    // v.push_back(1);
    // v.emplace_back(2); //Emplace_back is faster then push_back
    
    // vector<pair<int,int>>vec;
    
    // vec.push_back({1,2});
    // vec.emplace_back(1,2); //when you have to enter pair in the vector the  you write {1,2} like this in the push_back function
    //                         // #when you using Emplace_back then you dont have to write like this in  {} this braces
       
    // vector<int> v3(5,100);  //(size,instances)
    // vector<int> v4(5);
    // vector<int> v2(5,20);
    // vector<int> v8(v2);
    
    
    // vector<int>::iterator it = v.begin();
    // it++;
    // cout<< *(it) << " ";
    // vector<int>::iterator it = v.end();
    // vector<int>::iterator it = v.rend();
    // vector<int>::iterator it = v.rbegin();
    
    
    // for (vector<int>::iterator it = v.begin(); it != v.end();it++){
    //     cout<<*(it) <<" ";
    // }
    // for (auto it = v.begin(); it !=v.end(); it++)
    // {
    //     cout<<*(it) <<" ";
    // }
    // for (auto it:v)
    // {
    //     cout<<it<<" ";
    // }
    
    // v.erase(v.begin()+1);
    
    // v.erase(v.begin()+2,v.begin() + 4);
    
    
    // //vector insert function
    // vector<int>v(2,100);
    // v.insert(v.begin(),300)
    // v.insert(v.begin()+1,2,10);
    
    // vector<int> copy(2,50)
    // v.insert(v.begin(),copy.begin(),copy.end());
    
    // //size
    // cout<<v.size();
    
    // v.pop_back();
    
    // v1.swap(v2);
    // v.clear(); //erase entire vector
    // cout<<v.empy();
    
}


void Explain_List(){
    // list<int> ls;
    // ls.push_back(4);
    // ls.emplace_back(2);
    // ls.push_front(5);
    // ls.emplace_front();{2,4};
    
    // rest functions same as vector
    // begin,end,rbegin,read, clear,insert,size,swap
    
    
}

void explainDeque()
{
    deque<int> dq;
    dq.push_back(1);
    dq.emplace_back(2);
    dq.push_front(4);
    dq.emplace_front(3);
    
    dq.pop_back();
    dq.pop_front();
    
    dq.back();
    dq.front();
    
    // rest functions same as vector
    // begin,end,rbegin,read, clear,insert,size,swap
    
}


void explainStack()
{
    stack<int> st;
    st.push(1);
    st.push(2);
    st.push(3);
    st.emplace(5);
    
    cout<< st.top();
    st.pop();
    cout<<st.top();
    cout<<st.size();
    cout<<st.empty();
    
    stack<int> st1,st2;
    st1.swap(st2);
}



void explainQueue(){
    queue<int>q;
    q.push(1);
    q.push(2);
    q.emplace(4);
    
    q.back() +=50;
    cout<<q.front();
    cout<<q.back();
    cout<<q.front();
}

void explainPq()
{
    pq.push(5);
    pq.push(4);
    pq.push(3);
    pq.emplce(10);
    
    cout<<pq.top();
    pq.pop();
    cout<<pq.top();
    
    
    //Minimum heap
    priority_queue<int,vector<int>,,greater<int>> pq1;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.emplace(10);
    cout<<pq.top();
}



void explainSet()
{
    set<int> st;
    st.insert(1);
    st.emplace(2);
    st.insert(2);
    st.insert(4);
    st.insert(3);
    
    //functionality of insert in vector
    // can be used also, that only increases efficiency
    
    //begin(),end(),rbegin(), rend(),size(),,
    // empty() and swap() are same as those of above
    
    auto it = st.find(3);
    auto it = st.find(6);
    st.erase(5);
    int cnt = st.count(1);
    auto it = st.find(3);
    auto it = st.lower_bound(2);
    auto it = st.upper_bound(3);
    
    
}

void explain_Multiset()
{
    multiset<int>ms;
    ms.insert(1);{1}
    ms.insert(1);{1,1}
    ms.insert(1);{1,1,1}
    ms.insert(1);{1,1,1,1}
    
    ms.erase(1); //all 1's erased
    
    int cnt = ms.count(1);
    ms.erase(ms.find(1)); //only single 1 is delete
    
    
    ms.erase(ms.find(1),ms.find(1)+2);
    // rest all function same as set
}

void explainSet(){
    unordered set<int> st;
    // lower_bound and upper_bound function
    // does not works , rest all function are same
    // as above, it does not store in any
    // particuular order it has a better complexity
    // than set in most cases , exept some when collission happens
    
}

void explainMap()
{
    map<int,int>mpp;
    map<int,pair<int,int>>mpp1;
    map<pair<int,int>,int>mpp3;
    mpp[1] = 2;
    mpp.emplace({3,1});
    mpp.insert({2,4});
    mpp[{2,3}] = 10;
    for(auto it:mpp)
    {
        cout<<it.first <<" " <<it.second <<endl;
    }
    
    cout << mpp[1];
    cout << mpp[5];
    auto it = mpp.find(3);
    cout <<*(it).second;
    auto it = mpp.find(5);
    auto it = mpp.lower_bound(2);
    auto it = mpp.upper_bound(3);
}

void explainMultimap(){
    // everything same as map,only it can store multiple keys
    // only mpp[key] cannot ne used here
}

void explainunorderMap()
{
    //same as set and unorderd_set difference.
}

bool explainCompare(pair<int,int>p1,pair<int,int>p2){
    if(p1.second < p2.second){
        return True;
    }
    else if(p1.first>p2.second) {
        if(p1.first<p2.second) return true;
    }
    return false;
}
int main()
{
    explainPairs();
    
    

    return 0;
}